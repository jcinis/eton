#!/usr/bin/env python3
"""
Manage notes using the gitjournal.io notes format
"""

import re
import os
import json
import yaml
import datetime
import pytz
from pathlib import Path

DIR = os.path.expanduser('~/notes')
EXTENSIONS = ('*.txt','*.md')

def get_files(dirpath, extensions):
    """Gets all files with given extension"""
    rtn = []
    for ext in extensions:
        rtn.extend(Path(dirpath).glob(ext))
    return rtn

def _has_metadata(body):
   return body.startswith('---')

def parse_note(text):
    meta = {}
    body = text
    if _has_metadata(text):
        p = re.compile('---\n(.*?)\n---\n(.*)', flags=re.DOTALL)
        p.search(text).groups()
        (meta, body) = text.split('---\n', 2)[1:]
        return (yaml.load(meta,Loader=yaml.FullLoader), body.strip())
    else:
        return (meta, body)

def fetch_note(path):
    with open(path,'r') as f:
        return f.read()

def get_note(path):
    text = fetch_note(path)
    return parse_note(text)

def get_all_notes(order_by='modified', reverse=True):
    """List all notes by last modified date"""

    rows = []
    notes = get_files(DIR, EXTENSIONS)
    for npath in notes:
        stat = npath.stat()
        rows.append({
            'path':str(npath),
            'title':str(npath.stem),
            'created':stat.st_ctime,
            'created_iso':datetime.datetime.utcfromtimestamp(stat.st_ctime).replace(tzinfo=pytz.UTC).isoformat(),
            'modified':stat.st_mtime,
            'modified_iso':datetime.datetime.utcfromtimestamp(stat.st_mtime).replace(tzinfo=pytz.UTC).isoformat()
        })
    rows.sort(key=lambda x: x['modified'], reverse=True)
    return rows

def create_note():
    meta = {
        'title':'What do you think',
        'created': datetime.datetime.now().replace(microsecond=0).isoformat(),
    }




if __name__ == '__main__':

    notes = get_all_notes()
    note = get_note(notes[0]['path'])
    print(note)
    #print(json.dumps(note))

