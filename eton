#!/usr/bin/env python3
"""
Eton manages your notes using standard Markdown and updating YAML headers to be
compatible with the gitjournal.io notes format.
"""
import re
import os
import json
import fileinput
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
import unicodedata
import pytz
import yaml

DEBUG = False

DIR = os.path.expanduser('~/notes')
EXTENSION = 'md'
FILENAME_PATTERNS = ('*.txt', '*.md')

NOTE_METADATA = 0
NOTE_TEXT = 1

def get_files(dirpath, extensions):
    '''Gets all files with given extension'''
    rtn = []
    for ext in extensions:
        rtn.extend(Path(dirpath).glob(ext))
    return rtn

def has_metadata(body):
    '''Determines if a note body has embedded metadata in it (yaml header)'''
    return body.startswith('---')

def parse(text):
    '''Splits note into a tuple containing a metadata object and a text string'''
    meta = {}
    body = text
    if has_metadata(text):
        ptrn = re.compile('---\n(.*?)\n---\n(.*)', flags=re.DOTALL)
        ptrn.search(text).groups()
        (meta, body) = text.split('---\n', 2)[1:]
        return (yaml.load(meta, Loader=yaml.FullLoader), body.strip())
    return (meta, body)

def metadata_to_json(metadata):
    '''dumps metadata to a json string'''
    return json.dumps(metadata)

def create_metadata_from_file(filepath):
    '''Creates a metadata object using filename as title and native modified and created dates'''
    fpath = Path(filepath)
    stat = fpath.stat()
    modified = stat.st_mtime
    try:
        # BSD adds an attribute for birthtime
        created = stat.st_birthtime
    except AttributeError:
        # Linux has no way to retrieve created date only modified date
        created = stat.st_mtime

    return {
        'created': datetime
                   .utcfromtimestamp(created)
                   .replace(tzinfo=pytz.UTC)
                   .replace(microsecond=0),
        'modified': datetime
                    .utcfromtimestamp(modified)
                    .replace(tzinfo=pytz.UTC)
                    .replace(microsecond=0),
        'title': fpath.stem,
    }

def fetch(path):
    '''Returns the text body of the given path'''
    with open(path, 'r') as file_pointer:
        return file_pointer.read()

def read(path):
    '''Opens the given path and returns a parsed tuple containing the note metadata and text body'''
    text = fetch(path)
    return parse(text)

def get_all_notes(order_by='modified_timestamp', reverse=True):
    '''List all notes by last modified date'''

    rows = []
    notes = get_files(DIR, FILENAME_PATTERNS)
    for npath in notes:
        stat = npath.stat()
        rows.append({
            'path': str(npath),
            'title': str(npath.stem),
            'created_timestamp': stat.st_ctime,
            'created_iso': datetime
                           .utcfromtimestamp(stat.st_ctime)
                           .replace(tzinfo=pytz.UTC)
                           .isoformat(),
            'modified_timestamp': stat.st_mtime,
            'modified_iso': datetime
                            .utcfromtimestamp(stat.st_mtime)
                            .replace(tzinfo=pytz.UTC)
                            .isoformat()
        })
    rows.sort(key=lambda x: x[order_by], reverse=reverse)
    return rows

def create_metadata(options=None):
    '''Creates a new metadata object and merges it with any passed kwargs'''
    options = options or {}
    metadata = {
        'created': datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0),
        'modified': datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0),
    }
    return {**metadata, **options}

def update_metadata_modified(metadata):
    '''Updates the modified date with the current timestamp'''
    metadata['modified'] = datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0)
    return metadata

def slugify(text):
    '''Converts a string to a slug'''
    slug = unicodedata.normalize('NFKD', text)
    slug = slug.lower()
    slug = re.sub(r'[^a-z0-9]+', '-', slug).strip('-')
    slug = re.sub(r'[-]+', '-', slug)
    return slug

def create_filename(title=None, created=None):
    '''Creates a generic filename to be used when one is not specified'''
    if title:
        slug = slugify(title)
    elif created:
        slug = created.isoformat()
    else:
        slug = datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0).isoformat()

    return '%s.%s' % (slug, EXTENSION)

def render(metadata, text):
    '''Merges and formats metadata and text back in to a single string for output'''
    header = yaml.dump(metadata)
    header = "---\n%s---\n" % header
    return "%s\n%s" % (header, text)

def reformat_all():
    '''Reformats all note documents while maintaining modified date'''
    notes = get_all_notes()
    paths = []
    for note in notes:
        filepath = note['path']
        paths.append(reformat(filepath))
    return paths

def reformat(filepath):
    '''
    Updates the note to the current document format.

    Steps:
    - Loads a exisitng note
    - Rebuilds metadata
    - Render yaml and markdown as plaintext
    - Overwrite the file while maintining created and modified dates
    '''
    path = Path(filepath)
    stat = path.stat()
    metadata, text = read(filepath)
    metadata = {**create_metadata_from_file(filepath), **metadata}
    ctime = stat.st_ctime <= stat.st_mtime and stat.st_ctime or stat.st_mtime
    return write(filepath, metadata, text, ctime=ctime, mtime=stat.st_mtime)

def write(filepath, metadata, text, ctime=None, mtime=None):
    '''
    Renders a note document and writes it to the notes directory. Optionally
    a created and modified timestamp can be sent to preserve or modify the file
    dates.
    '''
    with open(filepath, 'w') as file_pointer:
        file_pointer.write(render(metadata, text))

    # Update local file dates
    if ctime and mtime:
        os.utime(filepath, (ctime, mtime))

    return filepath

def remove(filepath):
    '''Remove a file from the repo'''
    relpath = os.path.relpath(filepath, DIR)
    subprocess.run(['git', '-C', DIR, 'rm', relpath], check=True)
    subprocess.run(['git', '-C', DIR, 'commit', relpath, '-m', 'Deleting note %s' % relpath],
                   check=True)

def git_add(filepath):
    '''Adds and commits a note to the git repo'''
    relpath = os.path.relpath(filepath, DIR)
    subprocess.run(['git', '-C', DIR, 'add', relpath], check=True)
    subprocess.run(['git', '-C', DIR, 'commit', relpath, '-m', 'Adding new note %s' % relpath],
                   check=True)

def git_update(filepath):
    '''Commits note changes to the git repo'''
    relpath = os.path.relpath(filepath, DIR)
    subprocess.run(['git', '-C', DIR, 'commit', relpath, '-m', 'Editing note %s' % relpath], check=True)

def git_diff(filepath):
    '''Checks to see if a path has changed'''
    relpath = os.path.relpath(filepath, DIR)
    subprocess.run(['git', '-C', DIR, 'diff', relpath, '--name-status'], check=True)

def git_status():
    '''Prints the git status of the notes directory'''
    subprocess.run(['git', '-C', DIR, 'status'], check=True)

def git_push():
    '''Pushes the current master branch to origin'''
    subprocess.run(['git', '-C', DIR, 'push', 'origin', 'master'], check=True)

def git_pull():
    '''Pulls the origin master branch'''
    subprocess.run(['git', '-C', DIR, 'pull', 'origin', 'master'], check=True)

def which(program):
    '''
    Determines if a program exists in the PATH of the user

    Lifted from https://stackoverflow.com/questions/377017/test-if-executable-exists-in-python
    '''
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    del fname

    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def pretty(filepath):
    '''
    Prints note body and formats using 'glow' if it is installed on the system

    For more information on glow, please see:
    https://github.com/charmbracelet/glow
    '''

    note = read(filepath)

    if which('glow'):
        cmd = ['glow', '-']
        text = note[NOTE_TEXT]
        subprocess.run(cmd, input=text.encode(), check=True)

    else:
        print(note[NOTE_TEXT])

def main():
    '''
    Parses command line input and orchestrates core CLI functionality

    Usage: eton [filename]

    Examples:
    eton
    eton --title 'My new note'
    eton --title 'My new note' -t journal -t ideas
    eton my-new-note.md
    eton read my-new-note.md
    eton read my-new-note.md --pretty
    eton reformat my-new-note.md
    eton reformat-all
    '''

    parser = argparse.ArgumentParser(description='Note creation and management')
    parser.add_argument('--title', '-T', help="title of note - a slug of which will be used for the filename by default")
    parser.add_argument('--tag', '-t', dest='tags', action='append')
    #parser.add_argument('-', dest='pipe', action='store_true')
    parser.add_argument('--pretty', action='store_true')
    parser.add_argument('--debug', action='store_true')
    parser.add_argument('action', nargs='?', choices=['read', 'edit', 'rm', 'reformat', 'reformat-all', 'slug', 'push', 'pull'], default='edit', help='action to perform on the note')
    parser.add_argument('filename', nargs='?', help='filename of the note to create or modify')
    args = parser.parse_args()

    DEBUG = args.debug

    if args.action == 'read' and args.filename:
        # Look for file locally before looking in the notes directory
        if Path(args.filename).is_file():
            filepath = args.filename
        else:
            filepath = os.path.join(DIR, args.filename)

        if args.pretty:
            pretty(filepath)
        else:
            print(fetch(filepath))

    elif args.action == 'reformat' and args.filename:
        reformat(args.filename)

    elif args.action == 'reformat-all':
        raise NotImplementedError('To be implemented: reformat-all')

    elif args.action == 'slug' and args.title:
        print(slugify(args.title))

    elif args.action == 'pull':
        git_pull()

    elif args.action == 'push':
        git_push()

    elif args.action == 'rm' and args.filename:
        remove(args.filename)

    else:
        # action == edit

        MODE_ADD = 1
        MODE_UPDATE = 2
        MODE = MODE_UPDATE
        LAST = {}

        # Create new note metadata
        options = {}
        if args.title:
            options['title'] = args.title

        if args.tags:
            options['tags'] = args.tags

        metadata = create_metadata(options)
        text = ''

        # Parse piped in text
        #if args.pipe:
        #    for line in fileinput.input():
        #        text += line
        #    fileinput.close()

        if args.filename:
            if Path(args.filename).is_file():
                filepath = args.filename
            else:
                filepath = os.path.join(DIR, args.filename)
        else:
            slug = args.title and slugify(args.title) or metadata.get('created').isoformat()
            filename = "%s.%s" % (slug, EXTENSION)
            filepath = os.path.join(DIR, filename)

        path = Path(filepath)

        # create file if it doesn't exist
        if not path.is_file():
            MODE = MODE_ADD
            write(filepath, metadata, text)

        else:
            LAST = read(filepath)

        # open in EDITOR
        subprocess.run([os.environ.get('EDITOR', 'vim'), filepath], check=True)

        # if new file
        if MODE == MODE_ADD:
            git_add(filepath)

        # if editing file
        else:
            CURR = read(filepath)
            if LAST and LAST == CURR:
                if DEBUG:
                    print('UNMODIFIED')
            else:
                if DEBUG:
                    print('MODIFIED')

                # Update modified date
                write(filepath, update_metadata_modified(CURR[NOTE_METADATA]), CURR[NOTE_TEXT])

                del LAST
                del CURR

                # update git repo
                git_update(filepath)

if __name__ == '__main__':
    main()
