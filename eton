#!/usr/bin/env python3
"""
Manage notes using the gitjournal.io notes format

Todo:
    - [x] Parse note file to return a header dictionary and a markdown body
    - [x] Convert normal text file to markdown with yaml header
        - [x] Add modified date based on file modified date
        - [x] Add created date based on file created date
        - [x] Add title based on file title
    - [x] Convert all files in a folder to new format
    - [x] Add tags header and option to add tags at create
    - [ ] Create new note
        - [ ] Add metadata options via the command line similar to docker env (-e) additions.
        - [x] Add tags via the command line using -t
        - [ ] Append stdin text if piped in
    - [x] Update date when saving an existing message
    - [ ] Add tab completion for selecting notes
    - [ ] Add images to a folder for linking
    - [ ] Implement 'reformat-all' to migrate notes to the latest document format
    - [ ] Preserve note dates based on metadata
    - [x] Implement 'push' and 'pull' from repo

"""
import re
import os
import sys
import json
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
import unicodedata
import pytz
import yaml

DIR = os.path.expanduser('~/notes')
EXTENSION = 'md'
FILENAME_PATTERNS = ('*.txt', '*.md')

NOTE_METADATA = 0
NOTE_TEXT = 1

def get_files(dirpath, extensions):
    '''Gets all files with given extension'''
    rtn = []
    for ext in extensions:
        rtn.extend(Path(dirpath).glob(ext))
    return rtn

def has_metadata(body):
    '''Determines if a note body has embedded metadata in it (yaml header)'''
    return body.startswith('---')

def parse(text):
    meta = {}
    body = text
    if has_metadata(text):
        p = re.compile('---\n(.*?)\n---\n(.*)', flags=re.DOTALL)
        p.search(text).groups()
        (meta, body) = text.split('---\n', 2)[1:]
        return (yaml.load(meta,Loader=yaml.FullLoader), body.strip())
    else:
        return (meta, body)

def metadata_to_json(metadata):
    return json.dumps(metadata)

def create_metadata_from_file(filepath):
    p = Path(filepath)
    stat = p.stat()
    return {
        'created': datetime.utcfromtimestamp(stat.st_ctime).replace(tzinfo=pytz.UTC).replace(microsecond=0),
        'modified': datetime.utcfromtimestamp(stat.st_mtime).replace(tzinfo=pytz.UTC).replace(microsecond=0),
        'title': p.stem,
    }

def fetch(path):
    with open(path,'r') as f:
        return f.read()

def read(path):
    text = fetch(path)
    return parse(text)

def get_all_notes(order_by='modified', reverse=True):
    """List all notes by last modified date"""

    rows = []
    notes = get_files(DIR, FILENAME_PATTERNS)
    for npath in notes:
        stat = npath.stat()
        rows.append({
            'path':str(npath),
            'title':str(npath.stem),
            'created_timestamp':stat.st_ctime,
            'created_iso':datetime.utcfromtimestamp(stat.st_ctime).replace(tzinfo=pytz.UTC).isoformat(),
            'modified_timestamp':stat.st_mtime,
            'modified_iso':datetime.utcfromtimestamp(stat.st_mtime).replace(tzinfo=pytz.UTC).isoformat()
        })
    rows.sort(key=lambda x: x['modified_timestamp'], reverse=True)
    return rows

def create_metadata(options={}):
    metadata = {
        'created': datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0),
        'modified': datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0),
    }
    return { **metadata, **options }

def update_metadata_modified(metadata):
    metadata['modified'] = datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0)
    return metadata

def slugify(text):
    '''Converts a string to a slug'''
    slug = unicodedata.normalize('NFKD', text)
    slug = slug.lower()
    slug = re.sub(r'[^a-z0-9]+', '-', slug).strip('-')
    slug = re.sub(r'[-]+', '-', slug)
    return slug

def create_filename(title=None):
    slug = datetime.utcnow().replace(tzinfo=pytz.UTC).replace(microsecond=0)

def create(options):
    text = ''
    metadata = create_metadata(options)
    filename = '%s.%s' % (metadata['created'].isoformat(), EXTENSION)
    filepath = os.path.join(DIR,filename)
    return

def render(metadata,text):
    header = yaml.dump(metadata)
    header = "---\n%s---\n" % header
    return "%s\n%s" % (header,text)

def reformat_all():
    '''Reformats all note documents while maintaining modified date'''
    notes = get_all_notes()
    paths = []
    for note in notes:
        filepath = note['path']
        paths.append(reformat(filepath))
    return paths

def reformat(filepath):
    '''
    Updates the note to the current document format.

    Steps:
    - Loads a exisitng note
    - Rebuilds metadata
    - Render yaml and markdown as plaintext
    - Overwrite the file while maintining created and modified dates
    '''
    path = Path(filepath)
    stat = path.stat()
    metadata, text = read(filepath)
    metadata = {**create_metadata_from_file(filepath), **metadata}
    ctime = stat.st_ctime <= stat.st_mtime and stat.st_ctime or stat.st_mtime
    return write(filepath, metadata, text, ctime=ctime, mtime=stat.st_mtime)

def write(filepath, metadata, text, ctime=None, mtime=None):
    '''
    Renders a note document and writes it to the notes directory. Optionally
    a created and modified timestamp can be sent to preserve or modify the file
    dates.
    '''
    with open(filepath, 'w') as file_pointer:
        file_pointer.write(render(metadata, text))

    # Update local file dates
    if ctime and mtime:
        os.utime(filepath, (ctime, mtime))

    return filepath

def git_add(filepath):

    relpath = os.path.relpath(filepath,DIR)
    sp = subprocess.run(['git', '-C', DIR, 'add', relpath])
    sp = subprocess.run(['git', '-C', DIR, 'commit', relpath, '-m', 'Adding new note %s' % relpath])

def git_update(filepath):

    relpath = os.path.relpath(filepath,DIR)
    sp = subprocess.run(['git', '-C', DIR, 'commit', relpath, '-m', 'Editing note %s' % relpath])

def git_diff(filepath):
    relpath = os.path.relpath(filepath,DIR)
    sp = subprocess.run(['git', '-C', DIR, 'diff', relpath, '--name-status'], capture_output=True)
    print(sp)

def git_status():
    sp = subprocess.run(['git','-C',DIR,'status'])

def git_push():
    sp = subprocess.run(['git', '-C', DIR, 'push', 'origin', 'master'])

def git_pull():
    sp = subprocess.run(['git', '-C', DIR, 'pull', 'origin', 'master'])

def whatwhat(options):
    print(options)

def main():
    '''
    Parses command line input and orchestrates core CLI functionality

    Usage: eton [filename]

    Examples:
    eton
    eton --title 'My new note'
    eton --title 'My new note' -t journal -t ideas
    eton my-new-note.md
    eton read my-new-note.md
    eton reformat my-new-note.md
    eton reformat-all
    '''

    parser = argparse.ArgumentParser(description='Note creation and management')
    parser.add_argument('--title', '-T', help="title of note - a slug of which will be used for the filename by default")
    parser.add_argument('--tag', '-t', dest='tags', action='append')
    parser.add_argument('action', nargs='?', choices=['read', 'edit',
        'reformat', 'reformat-all', 'slug', 'push', 'pull'], default='edit', help='action to perform on the note')
    parser.add_argument('filename', nargs='?', help='filename of the note to create or modify')
    args = parser.parse_args()

    print(args)

    if args.action == 'read' and args.filename:
        print(fetch(os.path.join(DIR,args.filename)))

    elif args.action == 'reformat' and args.filename:
        raise NotImplementedError('To be implemented: reformat')

    elif args.action == 'reformat-all':
        raise NotImplementedError('To be implemented: reformat-all')

    elif args.action == 'slug' and args.title:
        print(slugify(args.title))

    elif args.action == 'pull':
        git_pull()

    elif args.action == 'push':
        git_push()

    else:

        MODE_ADD = 1
        MODE_UPDATE = 2
        MODE = MODE_UPDATE
        LAST = {}

        # Create new note metadata
        options = {}
        if args.title:
            options['title'] = args.title
        if args.tags:
            options['tags'] = args.tags

        metadata = create_metadata(options)
        #text = sys.stdin and "".join(sys.stdin.readlines()) or ""

        slug = args.title and slugify(args.title) or metadata.get('created').isoformat()
        filename = "%s.%s" % (slug, EXTENSION)
        filepath = os.path.join(DIR,filename)
        path = Path(filepath)

        # create file if it doesn't exist
        if not path.is_file():
            MODE = MODE_ADD
            write(filepath, metadata, "")

        else:
            LAST = read(filepath)


        # datetime when starting edit
        print(datetime.utcnow().isoformat())

        # open in EDITOR
        edit_subprocess = subprocess.run([os.environ.get('EDITOR','vim'), filepath])
        print(edit_subprocess)

        # datetime when closing editor
        print(datetime.utcnow().isoformat())

        # if new file
        if MODE == MODE_ADD:
            git_add(filepath)

        # if editing file
        else:
            CURR = read(filepath)
            if LAST and LAST == CURR:
                print('UNMODIFIED')
            else:
                print('MODIFIED')
                # Update modified date
                write(filepath, update_metadata_modified(CURR[NOTE_METADATA]), CURR[NOTE_TEXT])

                del LAST
                del CURR

            # update git repo
            git_update(filepath)

        # git status of notes
        #git_status()

if __name__ == '__main__':
    main()

    '''
    paths = reformat_all()
    print("Reformat complete: %s notes were reformatted" % len(paths))
    '''

    '''
    for note in notes:
        path = note['path']
        metadata, txt = read(path)
        if not metadata:
            metadata = create_metadata_from_file(path)

        rtn = {}
        rtn['path'] = note['path']
        rtn['metadata'] = metadata
        print(yaml.dump(rtn))

    #filepath = notes[-1]['path']
    #filepath = notes[20]['path']
    filepath = os.path.join(DIR,'jcinis-14117.md')
    metadata, text = read(filepath)
    if not metadata:
        metadata = create_metadata_from_file(filepath)

    newpath = filepath+".new.txt"
    write(newpath,metadata,text)
    print(render(metadata,text))
    '''

    '''
    note = get_note(filepath)
    metadata = metadata_from_file(filepath)
    metadata['tags'] = ['journal','your mom']
    metadata_json = metadata_to_json(metadata)
    print(metadata_json)
    print(json.dumps(note))
    note = (metadata,note[1])
    print(output(*note))
    '''
